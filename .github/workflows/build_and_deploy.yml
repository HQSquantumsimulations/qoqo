# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries
# name: Build and deploy
name: build_and_deploy

on:
  release:
    types: [created]

jobs:
  deploy_cratesio:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true
    - name: setup cargo
      run: |
        cargo login ${{ secrets.CRATES_IO_API_TOKEN }}
        cargo publish --manifest-path=roqoqo-derive/Cargo.toml
        sleep 30
        cargo publish --manifest-path=roqoqo/Cargo.toml
        sleep 30
        cargo publish --manifest-path=qoqo-macros/Cargo.toml
        sleep 30
        cargo publish --manifest-path=qoqo/Cargo.toml
        sleep 30
        cargo publish --manifest-path=roqoqo-test/Cargo.toml

  build_maturin_builds_linux:
    needs: deploy_cratesio
    name: maturin_build-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'ubuntu-latest',  rust: "x86_64-unknown-linux-gnu" },
        ]
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: actions/setup-python@v3.1.1
        with:
          python-version: ${{ matrix.python.py }}
      - name: linux wheels
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: build
          manylinux: 2010
          args: -i python${{ matrix.python.py }} --out wheels --no-sdist -m qoqo/Cargo.toml --release --cargo-extra-args="--locked"
      - name: test install
        run: |
          pip install wheels/* --force-reinstall
      - name: store artifact
        uses: actions/upload-artifact@v2
        with:
          name: py_wheels
          path: wheels

  build_maturin_builds_linux_src:
    needs: deploy_cratesio
    name: maturin_build-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'ubuntu-latest',  rust: "x86_64-unknown-linux-gnu" },
        ]
        python: [
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: actions/setup-python@v3.1.1
        with:
          python-version: ${{ matrix.python.py }}
      - name: linux wheels
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: sdist
          args:  --out wheels  -m qoqo/Cargo.toml 
      - name: test install
        run: |
          pip install wheels/* --force-reinstall
      - name: store artifact
        uses: actions/upload-artifact@v2
        with:
          name: py_wheels
          path: wheels
  
  build_maturin_builds_windows:
    name: maturin_build-${{ matrix.combinations.runs_on }}
    needs: deploy_cratesio
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'windows-latest', rust: "x86_64-pc-windows-msvc" },
        ]
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"}  
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: actions/setup-python@v3.1.1
        with:
          python-version: ${{ matrix.python.py }}
      - name: windows wheels
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: build
          args: -i python --out wheels --no-sdist -m qoqo/Cargo.toml --release --cargo-extra-args="--locked"
      - name: store artifact
        uses: actions/upload-artifact@v2
        with:
          name: py_wheels
          path: wheels
  
  build_maturin_builds_macos:
    name: maturin_build-${{ matrix.combinations.runs_on }}
    needs: deploy_cratesio
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'macOS-latest', rust: "aarch64-apple-darwin" },
        ]
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: actions/setup-python@v3.1.1
        with:
          python-version: ${{ matrix.python.py }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip maturin pytest numpy twine        
      - name: macos wheels
        if: ${{ matrix.combinations.runs_on == 'macOS-latest' && matrix.python-version < '3.8'}}
        run: |
          RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" maturin build -i ${{ matrix.python.interpreter }} --out wheels --no-sdist -m qoqo/Cargo.toml --release --cargo-extra-args="--locked"
      - name: universal wheels
        if: ${{ matrix.combinations.runs_on == 'macOS-latest' && matrix.python-version >= '3.8' }}
        run: |
          RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" maturin build -i ${{ matrix.python.interpreter }} --universal2 --out wheels --no-sdist -m qoqo/Cargo.toml --release --cargo-extra-args="--locked"
      - name: test install
        run: |
          pip install wheels/* --force-reinstall
      - name: store artifact
        uses: actions/upload-artifact@v2
        with:
          name: py_wheels
          path: wheels

  deploy:
      needs: [deploy_cratesio, build_maturin_builds_macos, build_maturin_builds_linux, build_maturin_builds_linux_src, build_maturin_builds_windows]
      runs-on: ubuntu-latest
      steps:
      - uses: actions/setup-python@v3.1.1
        with:
          python-version: ${{ matrix.python.py }}
      - uses: actions/download-artifact@v2
        with:
          name: py_wheels
      - name: Publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m pip install --upgrade pip
          pip install twine
          python -m twine upload --skip-existing *
